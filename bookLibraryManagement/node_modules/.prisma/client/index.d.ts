
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Books
 * 
 */
export type Books = $Result.DefaultSelection<Prisma.$BooksPayload>
/**
 * Model BorrowedBooks
 * 
 */
export type BorrowedBooks = $Result.DefaultSelection<Prisma.$BorrowedBooksPayload>
/**
 * Model BookRatings
 * 
 */
export type BookRatings = $Result.DefaultSelection<Prisma.$BookRatingsPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.books`: Exposes CRUD operations for the **Books** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.books.findMany()
    * ```
    */
  get books(): Prisma.BooksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.borrowedBooks`: Exposes CRUD operations for the **BorrowedBooks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BorrowedBooks
    * const borrowedBooks = await prisma.borrowedBooks.findMany()
    * ```
    */
  get borrowedBooks(): Prisma.BorrowedBooksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookRatings`: Exposes CRUD operations for the **BookRatings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookRatings
    * const bookRatings = await prisma.bookRatings.findMany()
    * ```
    */
  get bookRatings(): Prisma.BookRatingsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Books: 'Books',
    BorrowedBooks: 'BorrowedBooks',
    BookRatings: 'BookRatings'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "books" | "borrowedBooks" | "bookRatings"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Books: {
        payload: Prisma.$BooksPayload<ExtArgs>
        fields: Prisma.BooksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BooksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BooksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BooksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BooksPayload>
          }
          findFirst: {
            args: Prisma.BooksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BooksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BooksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BooksPayload>
          }
          findMany: {
            args: Prisma.BooksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BooksPayload>[]
          }
          create: {
            args: Prisma.BooksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BooksPayload>
          }
          createMany: {
            args: Prisma.BooksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BooksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BooksPayload>
          }
          update: {
            args: Prisma.BooksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BooksPayload>
          }
          deleteMany: {
            args: Prisma.BooksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BooksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BooksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BooksPayload>
          }
          aggregate: {
            args: Prisma.BooksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBooks>
          }
          groupBy: {
            args: Prisma.BooksGroupByArgs<ExtArgs>
            result: $Utils.Optional<BooksGroupByOutputType>[]
          }
          count: {
            args: Prisma.BooksCountArgs<ExtArgs>
            result: $Utils.Optional<BooksCountAggregateOutputType> | number
          }
        }
      }
      BorrowedBooks: {
        payload: Prisma.$BorrowedBooksPayload<ExtArgs>
        fields: Prisma.BorrowedBooksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BorrowedBooksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowedBooksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BorrowedBooksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowedBooksPayload>
          }
          findFirst: {
            args: Prisma.BorrowedBooksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowedBooksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BorrowedBooksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowedBooksPayload>
          }
          findMany: {
            args: Prisma.BorrowedBooksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowedBooksPayload>[]
          }
          create: {
            args: Prisma.BorrowedBooksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowedBooksPayload>
          }
          createMany: {
            args: Prisma.BorrowedBooksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BorrowedBooksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowedBooksPayload>
          }
          update: {
            args: Prisma.BorrowedBooksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowedBooksPayload>
          }
          deleteMany: {
            args: Prisma.BorrowedBooksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BorrowedBooksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BorrowedBooksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowedBooksPayload>
          }
          aggregate: {
            args: Prisma.BorrowedBooksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBorrowedBooks>
          }
          groupBy: {
            args: Prisma.BorrowedBooksGroupByArgs<ExtArgs>
            result: $Utils.Optional<BorrowedBooksGroupByOutputType>[]
          }
          count: {
            args: Prisma.BorrowedBooksCountArgs<ExtArgs>
            result: $Utils.Optional<BorrowedBooksCountAggregateOutputType> | number
          }
        }
      }
      BookRatings: {
        payload: Prisma.$BookRatingsPayload<ExtArgs>
        fields: Prisma.BookRatingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookRatingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookRatingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookRatingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookRatingsPayload>
          }
          findFirst: {
            args: Prisma.BookRatingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookRatingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookRatingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookRatingsPayload>
          }
          findMany: {
            args: Prisma.BookRatingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookRatingsPayload>[]
          }
          create: {
            args: Prisma.BookRatingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookRatingsPayload>
          }
          createMany: {
            args: Prisma.BookRatingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookRatingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookRatingsPayload>
          }
          update: {
            args: Prisma.BookRatingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookRatingsPayload>
          }
          deleteMany: {
            args: Prisma.BookRatingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookRatingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookRatingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookRatingsPayload>
          }
          aggregate: {
            args: Prisma.BookRatingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookRatings>
          }
          groupBy: {
            args: Prisma.BookRatingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookRatingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookRatingsCountArgs<ExtArgs>
            result: $Utils.Optional<BookRatingsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: UsersOmit
    books?: BooksOmit
    borrowedBooks?: BorrowedBooksOmit
    bookRatings?: BookRatingsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    BorrowedBooks: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BorrowedBooks?: boolean | UsersCountOutputTypeCountBorrowedBooksArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBorrowedBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BorrowedBooksWhereInput
  }


  /**
   * Count Type BooksCountOutputType
   */

  export type BooksCountOutputType = {
    BorrowedBooks: number
  }

  export type BooksCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BorrowedBooks?: boolean | BooksCountOutputTypeCountBorrowedBooksArgs
  }

  // Custom InputTypes
  /**
   * BooksCountOutputType without action
   */
  export type BooksCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BooksCountOutputType
     */
    select?: BooksCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BooksCountOutputType without action
   */
  export type BooksCountOutputTypeCountBorrowedBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BorrowedBooksWhereInput
  }


  /**
   * Count Type BorrowedBooksCountOutputType
   */

  export type BorrowedBooksCountOutputType = {
    BookRatings: number
  }

  export type BorrowedBooksCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BookRatings?: boolean | BorrowedBooksCountOutputTypeCountBookRatingsArgs
  }

  // Custom InputTypes
  /**
   * BorrowedBooksCountOutputType without action
   */
  export type BorrowedBooksCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooksCountOutputType
     */
    select?: BorrowedBooksCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BorrowedBooksCountOutputType without action
   */
  export type BorrowedBooksCountOutputTypeCountBookRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookRatingsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    UserId: number | null
  }

  export type UsersSumAggregateOutputType = {
    UserId: number | null
  }

  export type UsersMinAggregateOutputType = {
    UserId: number | null
    Name: string | null
  }

  export type UsersMaxAggregateOutputType = {
    UserId: number | null
    Name: string | null
  }

  export type UsersCountAggregateOutputType = {
    UserId: number
    Name: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    UserId?: true
  }

  export type UsersSumAggregateInputType = {
    UserId?: true
  }

  export type UsersMinAggregateInputType = {
    UserId?: true
    Name?: true
  }

  export type UsersMaxAggregateInputType = {
    UserId?: true
    Name?: true
  }

  export type UsersCountAggregateInputType = {
    UserId?: true
    Name?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    UserId: number
    Name: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserId?: boolean
    Name?: boolean
    BorrowedBooks?: boolean | Users$BorrowedBooksArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type UsersSelectScalar = {
    UserId?: boolean
    Name?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"UserId" | "Name", ExtArgs["result"]["users"]>
  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BorrowedBooks?: boolean | Users$BorrowedBooksArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      BorrowedBooks: Prisma.$BorrowedBooksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UserId: number
      Name: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `UserId`
     * const usersWithUserIdOnly = await prisma.users.findMany({ select: { UserId: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    BorrowedBooks<T extends Users$BorrowedBooksArgs<ExtArgs> = {}>(args?: Subset<T, Users$BorrowedBooksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly UserId: FieldRef<"Users", 'Int'>
    readonly Name: FieldRef<"Users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users.BorrowedBooks
   */
  export type Users$BorrowedBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    where?: BorrowedBooksWhereInput
    orderBy?: BorrowedBooksOrderByWithRelationInput | BorrowedBooksOrderByWithRelationInput[]
    cursor?: BorrowedBooksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BorrowedBooksScalarFieldEnum | BorrowedBooksScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Books
   */

  export type AggregateBooks = {
    _count: BooksCountAggregateOutputType | null
    _avg: BooksAvgAggregateOutputType | null
    _sum: BooksSumAggregateOutputType | null
    _min: BooksMinAggregateOutputType | null
    _max: BooksMaxAggregateOutputType | null
  }

  export type BooksAvgAggregateOutputType = {
    BookId: number | null
    PublishedYear: number | null
  }

  export type BooksSumAggregateOutputType = {
    BookId: number | null
    PublishedYear: number | null
  }

  export type BooksMinAggregateOutputType = {
    BookId: number | null
    Title: string | null
    Author: string | null
    PublishedYear: number | null
  }

  export type BooksMaxAggregateOutputType = {
    BookId: number | null
    Title: string | null
    Author: string | null
    PublishedYear: number | null
  }

  export type BooksCountAggregateOutputType = {
    BookId: number
    Title: number
    Author: number
    PublishedYear: number
    _all: number
  }


  export type BooksAvgAggregateInputType = {
    BookId?: true
    PublishedYear?: true
  }

  export type BooksSumAggregateInputType = {
    BookId?: true
    PublishedYear?: true
  }

  export type BooksMinAggregateInputType = {
    BookId?: true
    Title?: true
    Author?: true
    PublishedYear?: true
  }

  export type BooksMaxAggregateInputType = {
    BookId?: true
    Title?: true
    Author?: true
    PublishedYear?: true
  }

  export type BooksCountAggregateInputType = {
    BookId?: true
    Title?: true
    Author?: true
    PublishedYear?: true
    _all?: true
  }

  export type BooksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Books to aggregate.
     */
    where?: BooksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BooksOrderByWithRelationInput | BooksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BooksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BooksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BooksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BooksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BooksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BooksMaxAggregateInputType
  }

  export type GetBooksAggregateType<T extends BooksAggregateArgs> = {
        [P in keyof T & keyof AggregateBooks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooks[P]>
      : GetScalarType<T[P], AggregateBooks[P]>
  }




  export type BooksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BooksWhereInput
    orderBy?: BooksOrderByWithAggregationInput | BooksOrderByWithAggregationInput[]
    by: BooksScalarFieldEnum[] | BooksScalarFieldEnum
    having?: BooksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BooksCountAggregateInputType | true
    _avg?: BooksAvgAggregateInputType
    _sum?: BooksSumAggregateInputType
    _min?: BooksMinAggregateInputType
    _max?: BooksMaxAggregateInputType
  }

  export type BooksGroupByOutputType = {
    BookId: number
    Title: string
    Author: string
    PublishedYear: number | null
    _count: BooksCountAggregateOutputType | null
    _avg: BooksAvgAggregateOutputType | null
    _sum: BooksSumAggregateOutputType | null
    _min: BooksMinAggregateOutputType | null
    _max: BooksMaxAggregateOutputType | null
  }

  type GetBooksGroupByPayload<T extends BooksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BooksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BooksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BooksGroupByOutputType[P]>
            : GetScalarType<T[P], BooksGroupByOutputType[P]>
        }
      >
    >


  export type BooksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    BookId?: boolean
    Title?: boolean
    Author?: boolean
    PublishedYear?: boolean
    BorrowedBooks?: boolean | Books$BorrowedBooksArgs<ExtArgs>
    _count?: boolean | BooksCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["books"]>



  export type BooksSelectScalar = {
    BookId?: boolean
    Title?: boolean
    Author?: boolean
    PublishedYear?: boolean
  }

  export type BooksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"BookId" | "Title" | "Author" | "PublishedYear", ExtArgs["result"]["books"]>
  export type BooksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BorrowedBooks?: boolean | Books$BorrowedBooksArgs<ExtArgs>
    _count?: boolean | BooksCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BooksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Books"
    objects: {
      BorrowedBooks: Prisma.$BorrowedBooksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      BookId: number
      Title: string
      Author: string
      PublishedYear: number | null
    }, ExtArgs["result"]["books"]>
    composites: {}
  }

  type BooksGetPayload<S extends boolean | null | undefined | BooksDefaultArgs> = $Result.GetResult<Prisma.$BooksPayload, S>

  type BooksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BooksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BooksCountAggregateInputType | true
    }

  export interface BooksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Books'], meta: { name: 'Books' } }
    /**
     * Find zero or one Books that matches the filter.
     * @param {BooksFindUniqueArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BooksFindUniqueArgs>(args: SelectSubset<T, BooksFindUniqueArgs<ExtArgs>>): Prisma__BooksClient<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Books that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BooksFindUniqueOrThrowArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BooksFindUniqueOrThrowArgs>(args: SelectSubset<T, BooksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BooksClient<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksFindFirstArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BooksFindFirstArgs>(args?: SelectSubset<T, BooksFindFirstArgs<ExtArgs>>): Prisma__BooksClient<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Books that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksFindFirstOrThrowArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BooksFindFirstOrThrowArgs>(args?: SelectSubset<T, BooksFindFirstOrThrowArgs<ExtArgs>>): Prisma__BooksClient<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.books.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.books.findMany({ take: 10 })
     * 
     * // Only select the `BookId`
     * const booksWithBookIdOnly = await prisma.books.findMany({ select: { BookId: true } })
     * 
     */
    findMany<T extends BooksFindManyArgs>(args?: SelectSubset<T, BooksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Books.
     * @param {BooksCreateArgs} args - Arguments to create a Books.
     * @example
     * // Create one Books
     * const Books = await prisma.books.create({
     *   data: {
     *     // ... data to create a Books
     *   }
     * })
     * 
     */
    create<T extends BooksCreateArgs>(args: SelectSubset<T, BooksCreateArgs<ExtArgs>>): Prisma__BooksClient<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Books.
     * @param {BooksCreateManyArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const books = await prisma.books.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BooksCreateManyArgs>(args?: SelectSubset<T, BooksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Books.
     * @param {BooksDeleteArgs} args - Arguments to delete one Books.
     * @example
     * // Delete one Books
     * const Books = await prisma.books.delete({
     *   where: {
     *     // ... filter to delete one Books
     *   }
     * })
     * 
     */
    delete<T extends BooksDeleteArgs>(args: SelectSubset<T, BooksDeleteArgs<ExtArgs>>): Prisma__BooksClient<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Books.
     * @param {BooksUpdateArgs} args - Arguments to update one Books.
     * @example
     * // Update one Books
     * const books = await prisma.books.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BooksUpdateArgs>(args: SelectSubset<T, BooksUpdateArgs<ExtArgs>>): Prisma__BooksClient<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Books.
     * @param {BooksDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.books.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BooksDeleteManyArgs>(args?: SelectSubset<T, BooksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const books = await prisma.books.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BooksUpdateManyArgs>(args: SelectSubset<T, BooksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Books.
     * @param {BooksUpsertArgs} args - Arguments to update or create a Books.
     * @example
     * // Update or create a Books
     * const books = await prisma.books.upsert({
     *   create: {
     *     // ... data to create a Books
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Books we want to update
     *   }
     * })
     */
    upsert<T extends BooksUpsertArgs>(args: SelectSubset<T, BooksUpsertArgs<ExtArgs>>): Prisma__BooksClient<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.books.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BooksCountArgs>(
      args?: Subset<T, BooksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BooksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BooksAggregateArgs>(args: Subset<T, BooksAggregateArgs>): Prisma.PrismaPromise<GetBooksAggregateType<T>>

    /**
     * Group by Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BooksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BooksGroupByArgs['orderBy'] }
        : { orderBy?: BooksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BooksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBooksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Books model
   */
  readonly fields: BooksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Books.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BooksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    BorrowedBooks<T extends Books$BorrowedBooksArgs<ExtArgs> = {}>(args?: Subset<T, Books$BorrowedBooksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Books model
   */ 
  interface BooksFieldRefs {
    readonly BookId: FieldRef<"Books", 'Int'>
    readonly Title: FieldRef<"Books", 'String'>
    readonly Author: FieldRef<"Books", 'String'>
    readonly PublishedYear: FieldRef<"Books", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Books findUnique
   */
  export type BooksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where: BooksWhereUniqueInput
  }

  /**
   * Books findUniqueOrThrow
   */
  export type BooksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where: BooksWhereUniqueInput
  }

  /**
   * Books findFirst
   */
  export type BooksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where?: BooksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BooksOrderByWithRelationInput | BooksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BooksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BooksScalarFieldEnum | BooksScalarFieldEnum[]
  }

  /**
   * Books findFirstOrThrow
   */
  export type BooksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where?: BooksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BooksOrderByWithRelationInput | BooksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BooksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BooksScalarFieldEnum | BooksScalarFieldEnum[]
  }

  /**
   * Books findMany
   */
  export type BooksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where?: BooksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BooksOrderByWithRelationInput | BooksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     */
    cursor?: BooksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    distinct?: BooksScalarFieldEnum | BooksScalarFieldEnum[]
  }

  /**
   * Books create
   */
  export type BooksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
    /**
     * The data needed to create a Books.
     */
    data: XOR<BooksCreateInput, BooksUncheckedCreateInput>
  }

  /**
   * Books createMany
   */
  export type BooksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Books.
     */
    data: BooksCreateManyInput | BooksCreateManyInput[]
  }

  /**
   * Books update
   */
  export type BooksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
    /**
     * The data needed to update a Books.
     */
    data: XOR<BooksUpdateInput, BooksUncheckedUpdateInput>
    /**
     * Choose, which Books to update.
     */
    where: BooksWhereUniqueInput
  }

  /**
   * Books updateMany
   */
  export type BooksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Books.
     */
    data: XOR<BooksUpdateManyMutationInput, BooksUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     */
    where?: BooksWhereInput
    /**
     * Limit how many Books to update.
     */
    limit?: number
  }

  /**
   * Books upsert
   */
  export type BooksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
    /**
     * The filter to search for the Books to update in case it exists.
     */
    where: BooksWhereUniqueInput
    /**
     * In case the Books found by the `where` argument doesn't exist, create a new Books with this data.
     */
    create: XOR<BooksCreateInput, BooksUncheckedCreateInput>
    /**
     * In case the Books was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BooksUpdateInput, BooksUncheckedUpdateInput>
  }

  /**
   * Books delete
   */
  export type BooksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
    /**
     * Filter which Books to delete.
     */
    where: BooksWhereUniqueInput
  }

  /**
   * Books deleteMany
   */
  export type BooksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Books to delete
     */
    where?: BooksWhereInput
    /**
     * Limit how many Books to delete.
     */
    limit?: number
  }

  /**
   * Books.BorrowedBooks
   */
  export type Books$BorrowedBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    where?: BorrowedBooksWhereInput
    orderBy?: BorrowedBooksOrderByWithRelationInput | BorrowedBooksOrderByWithRelationInput[]
    cursor?: BorrowedBooksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BorrowedBooksScalarFieldEnum | BorrowedBooksScalarFieldEnum[]
  }

  /**
   * Books without action
   */
  export type BooksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Books
     */
    select?: BooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Books
     */
    omit?: BooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BooksInclude<ExtArgs> | null
  }


  /**
   * Model BorrowedBooks
   */

  export type AggregateBorrowedBooks = {
    _count: BorrowedBooksCountAggregateOutputType | null
    _avg: BorrowedBooksAvgAggregateOutputType | null
    _sum: BorrowedBooksSumAggregateOutputType | null
    _min: BorrowedBooksMinAggregateOutputType | null
    _max: BorrowedBooksMaxAggregateOutputType | null
  }

  export type BorrowedBooksAvgAggregateOutputType = {
    BorrowId: number | null
    UserId: number | null
    BookId: number | null
  }

  export type BorrowedBooksSumAggregateOutputType = {
    BorrowId: number | null
    UserId: number | null
    BookId: number | null
  }

  export type BorrowedBooksMinAggregateOutputType = {
    BorrowId: number | null
    UserId: number | null
    BookId: number | null
    BorrowDate: Date | null
    ReturnDate: Date | null
  }

  export type BorrowedBooksMaxAggregateOutputType = {
    BorrowId: number | null
    UserId: number | null
    BookId: number | null
    BorrowDate: Date | null
    ReturnDate: Date | null
  }

  export type BorrowedBooksCountAggregateOutputType = {
    BorrowId: number
    UserId: number
    BookId: number
    BorrowDate: number
    ReturnDate: number
    _all: number
  }


  export type BorrowedBooksAvgAggregateInputType = {
    BorrowId?: true
    UserId?: true
    BookId?: true
  }

  export type BorrowedBooksSumAggregateInputType = {
    BorrowId?: true
    UserId?: true
    BookId?: true
  }

  export type BorrowedBooksMinAggregateInputType = {
    BorrowId?: true
    UserId?: true
    BookId?: true
    BorrowDate?: true
    ReturnDate?: true
  }

  export type BorrowedBooksMaxAggregateInputType = {
    BorrowId?: true
    UserId?: true
    BookId?: true
    BorrowDate?: true
    ReturnDate?: true
  }

  export type BorrowedBooksCountAggregateInputType = {
    BorrowId?: true
    UserId?: true
    BookId?: true
    BorrowDate?: true
    ReturnDate?: true
    _all?: true
  }

  export type BorrowedBooksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BorrowedBooks to aggregate.
     */
    where?: BorrowedBooksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BorrowedBooks to fetch.
     */
    orderBy?: BorrowedBooksOrderByWithRelationInput | BorrowedBooksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BorrowedBooksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BorrowedBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BorrowedBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BorrowedBooks
    **/
    _count?: true | BorrowedBooksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BorrowedBooksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BorrowedBooksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BorrowedBooksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BorrowedBooksMaxAggregateInputType
  }

  export type GetBorrowedBooksAggregateType<T extends BorrowedBooksAggregateArgs> = {
        [P in keyof T & keyof AggregateBorrowedBooks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBorrowedBooks[P]>
      : GetScalarType<T[P], AggregateBorrowedBooks[P]>
  }




  export type BorrowedBooksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BorrowedBooksWhereInput
    orderBy?: BorrowedBooksOrderByWithAggregationInput | BorrowedBooksOrderByWithAggregationInput[]
    by: BorrowedBooksScalarFieldEnum[] | BorrowedBooksScalarFieldEnum
    having?: BorrowedBooksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BorrowedBooksCountAggregateInputType | true
    _avg?: BorrowedBooksAvgAggregateInputType
    _sum?: BorrowedBooksSumAggregateInputType
    _min?: BorrowedBooksMinAggregateInputType
    _max?: BorrowedBooksMaxAggregateInputType
  }

  export type BorrowedBooksGroupByOutputType = {
    BorrowId: number
    UserId: number
    BookId: number
    BorrowDate: Date
    ReturnDate: Date | null
    _count: BorrowedBooksCountAggregateOutputType | null
    _avg: BorrowedBooksAvgAggregateOutputType | null
    _sum: BorrowedBooksSumAggregateOutputType | null
    _min: BorrowedBooksMinAggregateOutputType | null
    _max: BorrowedBooksMaxAggregateOutputType | null
  }

  type GetBorrowedBooksGroupByPayload<T extends BorrowedBooksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BorrowedBooksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BorrowedBooksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BorrowedBooksGroupByOutputType[P]>
            : GetScalarType<T[P], BorrowedBooksGroupByOutputType[P]>
        }
      >
    >


  export type BorrowedBooksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    BorrowId?: boolean
    UserId?: boolean
    BookId?: boolean
    BorrowDate?: boolean
    ReturnDate?: boolean
    BookRatings?: boolean | BorrowedBooks$BookRatingsArgs<ExtArgs>
    Books?: boolean | BooksDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
    _count?: boolean | BorrowedBooksCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["borrowedBooks"]>



  export type BorrowedBooksSelectScalar = {
    BorrowId?: boolean
    UserId?: boolean
    BookId?: boolean
    BorrowDate?: boolean
    ReturnDate?: boolean
  }

  export type BorrowedBooksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"BorrowId" | "UserId" | "BookId" | "BorrowDate" | "ReturnDate", ExtArgs["result"]["borrowedBooks"]>
  export type BorrowedBooksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BookRatings?: boolean | BorrowedBooks$BookRatingsArgs<ExtArgs>
    Books?: boolean | BooksDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
    _count?: boolean | BorrowedBooksCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BorrowedBooksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BorrowedBooks"
    objects: {
      BookRatings: Prisma.$BookRatingsPayload<ExtArgs>[]
      Books: Prisma.$BooksPayload<ExtArgs>
      Users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      BorrowId: number
      UserId: number
      BookId: number
      BorrowDate: Date
      ReturnDate: Date | null
    }, ExtArgs["result"]["borrowedBooks"]>
    composites: {}
  }

  type BorrowedBooksGetPayload<S extends boolean | null | undefined | BorrowedBooksDefaultArgs> = $Result.GetResult<Prisma.$BorrowedBooksPayload, S>

  type BorrowedBooksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BorrowedBooksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BorrowedBooksCountAggregateInputType | true
    }

  export interface BorrowedBooksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BorrowedBooks'], meta: { name: 'BorrowedBooks' } }
    /**
     * Find zero or one BorrowedBooks that matches the filter.
     * @param {BorrowedBooksFindUniqueArgs} args - Arguments to find a BorrowedBooks
     * @example
     * // Get one BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BorrowedBooksFindUniqueArgs>(args: SelectSubset<T, BorrowedBooksFindUniqueArgs<ExtArgs>>): Prisma__BorrowedBooksClient<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BorrowedBooks that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BorrowedBooksFindUniqueOrThrowArgs} args - Arguments to find a BorrowedBooks
     * @example
     * // Get one BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BorrowedBooksFindUniqueOrThrowArgs>(args: SelectSubset<T, BorrowedBooksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BorrowedBooksClient<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BorrowedBooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowedBooksFindFirstArgs} args - Arguments to find a BorrowedBooks
     * @example
     * // Get one BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BorrowedBooksFindFirstArgs>(args?: SelectSubset<T, BorrowedBooksFindFirstArgs<ExtArgs>>): Prisma__BorrowedBooksClient<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BorrowedBooks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowedBooksFindFirstOrThrowArgs} args - Arguments to find a BorrowedBooks
     * @example
     * // Get one BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BorrowedBooksFindFirstOrThrowArgs>(args?: SelectSubset<T, BorrowedBooksFindFirstOrThrowArgs<ExtArgs>>): Prisma__BorrowedBooksClient<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BorrowedBooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowedBooksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.findMany()
     * 
     * // Get first 10 BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.findMany({ take: 10 })
     * 
     * // Only select the `BorrowId`
     * const borrowedBooksWithBorrowIdOnly = await prisma.borrowedBooks.findMany({ select: { BorrowId: true } })
     * 
     */
    findMany<T extends BorrowedBooksFindManyArgs>(args?: SelectSubset<T, BorrowedBooksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BorrowedBooks.
     * @param {BorrowedBooksCreateArgs} args - Arguments to create a BorrowedBooks.
     * @example
     * // Create one BorrowedBooks
     * const BorrowedBooks = await prisma.borrowedBooks.create({
     *   data: {
     *     // ... data to create a BorrowedBooks
     *   }
     * })
     * 
     */
    create<T extends BorrowedBooksCreateArgs>(args: SelectSubset<T, BorrowedBooksCreateArgs<ExtArgs>>): Prisma__BorrowedBooksClient<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BorrowedBooks.
     * @param {BorrowedBooksCreateManyArgs} args - Arguments to create many BorrowedBooks.
     * @example
     * // Create many BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BorrowedBooksCreateManyArgs>(args?: SelectSubset<T, BorrowedBooksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BorrowedBooks.
     * @param {BorrowedBooksDeleteArgs} args - Arguments to delete one BorrowedBooks.
     * @example
     * // Delete one BorrowedBooks
     * const BorrowedBooks = await prisma.borrowedBooks.delete({
     *   where: {
     *     // ... filter to delete one BorrowedBooks
     *   }
     * })
     * 
     */
    delete<T extends BorrowedBooksDeleteArgs>(args: SelectSubset<T, BorrowedBooksDeleteArgs<ExtArgs>>): Prisma__BorrowedBooksClient<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BorrowedBooks.
     * @param {BorrowedBooksUpdateArgs} args - Arguments to update one BorrowedBooks.
     * @example
     * // Update one BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BorrowedBooksUpdateArgs>(args: SelectSubset<T, BorrowedBooksUpdateArgs<ExtArgs>>): Prisma__BorrowedBooksClient<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BorrowedBooks.
     * @param {BorrowedBooksDeleteManyArgs} args - Arguments to filter BorrowedBooks to delete.
     * @example
     * // Delete a few BorrowedBooks
     * const { count } = await prisma.borrowedBooks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BorrowedBooksDeleteManyArgs>(args?: SelectSubset<T, BorrowedBooksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BorrowedBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowedBooksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BorrowedBooksUpdateManyArgs>(args: SelectSubset<T, BorrowedBooksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BorrowedBooks.
     * @param {BorrowedBooksUpsertArgs} args - Arguments to update or create a BorrowedBooks.
     * @example
     * // Update or create a BorrowedBooks
     * const borrowedBooks = await prisma.borrowedBooks.upsert({
     *   create: {
     *     // ... data to create a BorrowedBooks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BorrowedBooks we want to update
     *   }
     * })
     */
    upsert<T extends BorrowedBooksUpsertArgs>(args: SelectSubset<T, BorrowedBooksUpsertArgs<ExtArgs>>): Prisma__BorrowedBooksClient<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BorrowedBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowedBooksCountArgs} args - Arguments to filter BorrowedBooks to count.
     * @example
     * // Count the number of BorrowedBooks
     * const count = await prisma.borrowedBooks.count({
     *   where: {
     *     // ... the filter for the BorrowedBooks we want to count
     *   }
     * })
    **/
    count<T extends BorrowedBooksCountArgs>(
      args?: Subset<T, BorrowedBooksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BorrowedBooksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BorrowedBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowedBooksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BorrowedBooksAggregateArgs>(args: Subset<T, BorrowedBooksAggregateArgs>): Prisma.PrismaPromise<GetBorrowedBooksAggregateType<T>>

    /**
     * Group by BorrowedBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowedBooksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BorrowedBooksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BorrowedBooksGroupByArgs['orderBy'] }
        : { orderBy?: BorrowedBooksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BorrowedBooksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBorrowedBooksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BorrowedBooks model
   */
  readonly fields: BorrowedBooksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BorrowedBooks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BorrowedBooksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    BookRatings<T extends BorrowedBooks$BookRatingsArgs<ExtArgs> = {}>(args?: Subset<T, BorrowedBooks$BookRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    Books<T extends BooksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BooksDefaultArgs<ExtArgs>>): Prisma__BooksClient<$Result.GetResult<Prisma.$BooksPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BorrowedBooks model
   */ 
  interface BorrowedBooksFieldRefs {
    readonly BorrowId: FieldRef<"BorrowedBooks", 'Int'>
    readonly UserId: FieldRef<"BorrowedBooks", 'Int'>
    readonly BookId: FieldRef<"BorrowedBooks", 'Int'>
    readonly BorrowDate: FieldRef<"BorrowedBooks", 'DateTime'>
    readonly ReturnDate: FieldRef<"BorrowedBooks", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BorrowedBooks findUnique
   */
  export type BorrowedBooksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    /**
     * Filter, which BorrowedBooks to fetch.
     */
    where: BorrowedBooksWhereUniqueInput
  }

  /**
   * BorrowedBooks findUniqueOrThrow
   */
  export type BorrowedBooksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    /**
     * Filter, which BorrowedBooks to fetch.
     */
    where: BorrowedBooksWhereUniqueInput
  }

  /**
   * BorrowedBooks findFirst
   */
  export type BorrowedBooksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    /**
     * Filter, which BorrowedBooks to fetch.
     */
    where?: BorrowedBooksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BorrowedBooks to fetch.
     */
    orderBy?: BorrowedBooksOrderByWithRelationInput | BorrowedBooksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BorrowedBooks.
     */
    cursor?: BorrowedBooksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BorrowedBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BorrowedBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BorrowedBooks.
     */
    distinct?: BorrowedBooksScalarFieldEnum | BorrowedBooksScalarFieldEnum[]
  }

  /**
   * BorrowedBooks findFirstOrThrow
   */
  export type BorrowedBooksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    /**
     * Filter, which BorrowedBooks to fetch.
     */
    where?: BorrowedBooksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BorrowedBooks to fetch.
     */
    orderBy?: BorrowedBooksOrderByWithRelationInput | BorrowedBooksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BorrowedBooks.
     */
    cursor?: BorrowedBooksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BorrowedBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BorrowedBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BorrowedBooks.
     */
    distinct?: BorrowedBooksScalarFieldEnum | BorrowedBooksScalarFieldEnum[]
  }

  /**
   * BorrowedBooks findMany
   */
  export type BorrowedBooksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    /**
     * Filter, which BorrowedBooks to fetch.
     */
    where?: BorrowedBooksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BorrowedBooks to fetch.
     */
    orderBy?: BorrowedBooksOrderByWithRelationInput | BorrowedBooksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BorrowedBooks.
     */
    cursor?: BorrowedBooksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BorrowedBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BorrowedBooks.
     */
    skip?: number
    distinct?: BorrowedBooksScalarFieldEnum | BorrowedBooksScalarFieldEnum[]
  }

  /**
   * BorrowedBooks create
   */
  export type BorrowedBooksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    /**
     * The data needed to create a BorrowedBooks.
     */
    data: XOR<BorrowedBooksCreateInput, BorrowedBooksUncheckedCreateInput>
  }

  /**
   * BorrowedBooks createMany
   */
  export type BorrowedBooksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BorrowedBooks.
     */
    data: BorrowedBooksCreateManyInput | BorrowedBooksCreateManyInput[]
  }

  /**
   * BorrowedBooks update
   */
  export type BorrowedBooksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    /**
     * The data needed to update a BorrowedBooks.
     */
    data: XOR<BorrowedBooksUpdateInput, BorrowedBooksUncheckedUpdateInput>
    /**
     * Choose, which BorrowedBooks to update.
     */
    where: BorrowedBooksWhereUniqueInput
  }

  /**
   * BorrowedBooks updateMany
   */
  export type BorrowedBooksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BorrowedBooks.
     */
    data: XOR<BorrowedBooksUpdateManyMutationInput, BorrowedBooksUncheckedUpdateManyInput>
    /**
     * Filter which BorrowedBooks to update
     */
    where?: BorrowedBooksWhereInput
    /**
     * Limit how many BorrowedBooks to update.
     */
    limit?: number
  }

  /**
   * BorrowedBooks upsert
   */
  export type BorrowedBooksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    /**
     * The filter to search for the BorrowedBooks to update in case it exists.
     */
    where: BorrowedBooksWhereUniqueInput
    /**
     * In case the BorrowedBooks found by the `where` argument doesn't exist, create a new BorrowedBooks with this data.
     */
    create: XOR<BorrowedBooksCreateInput, BorrowedBooksUncheckedCreateInput>
    /**
     * In case the BorrowedBooks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BorrowedBooksUpdateInput, BorrowedBooksUncheckedUpdateInput>
  }

  /**
   * BorrowedBooks delete
   */
  export type BorrowedBooksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
    /**
     * Filter which BorrowedBooks to delete.
     */
    where: BorrowedBooksWhereUniqueInput
  }

  /**
   * BorrowedBooks deleteMany
   */
  export type BorrowedBooksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BorrowedBooks to delete
     */
    where?: BorrowedBooksWhereInput
    /**
     * Limit how many BorrowedBooks to delete.
     */
    limit?: number
  }

  /**
   * BorrowedBooks.BookRatings
   */
  export type BorrowedBooks$BookRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    where?: BookRatingsWhereInput
    orderBy?: BookRatingsOrderByWithRelationInput | BookRatingsOrderByWithRelationInput[]
    cursor?: BookRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookRatingsScalarFieldEnum | BookRatingsScalarFieldEnum[]
  }

  /**
   * BorrowedBooks without action
   */
  export type BorrowedBooksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowedBooks
     */
    select?: BorrowedBooksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BorrowedBooks
     */
    omit?: BorrowedBooksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowedBooksInclude<ExtArgs> | null
  }


  /**
   * Model BookRatings
   */

  export type AggregateBookRatings = {
    _count: BookRatingsCountAggregateOutputType | null
    _avg: BookRatingsAvgAggregateOutputType | null
    _sum: BookRatingsSumAggregateOutputType | null
    _min: BookRatingsMinAggregateOutputType | null
    _max: BookRatingsMaxAggregateOutputType | null
  }

  export type BookRatingsAvgAggregateOutputType = {
    RatingId: number | null
    BorrowId: number | null
    Rating: number | null
  }

  export type BookRatingsSumAggregateOutputType = {
    RatingId: number | null
    BorrowId: number | null
    Rating: number | null
  }

  export type BookRatingsMinAggregateOutputType = {
    RatingId: number | null
    BorrowId: number | null
    Rating: number | null
    RatingDate: Date | null
  }

  export type BookRatingsMaxAggregateOutputType = {
    RatingId: number | null
    BorrowId: number | null
    Rating: number | null
    RatingDate: Date | null
  }

  export type BookRatingsCountAggregateOutputType = {
    RatingId: number
    BorrowId: number
    Rating: number
    RatingDate: number
    _all: number
  }


  export type BookRatingsAvgAggregateInputType = {
    RatingId?: true
    BorrowId?: true
    Rating?: true
  }

  export type BookRatingsSumAggregateInputType = {
    RatingId?: true
    BorrowId?: true
    Rating?: true
  }

  export type BookRatingsMinAggregateInputType = {
    RatingId?: true
    BorrowId?: true
    Rating?: true
    RatingDate?: true
  }

  export type BookRatingsMaxAggregateInputType = {
    RatingId?: true
    BorrowId?: true
    Rating?: true
    RatingDate?: true
  }

  export type BookRatingsCountAggregateInputType = {
    RatingId?: true
    BorrowId?: true
    Rating?: true
    RatingDate?: true
    _all?: true
  }

  export type BookRatingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookRatings to aggregate.
     */
    where?: BookRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookRatings to fetch.
     */
    orderBy?: BookRatingsOrderByWithRelationInput | BookRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookRatings
    **/
    _count?: true | BookRatingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookRatingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookRatingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookRatingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookRatingsMaxAggregateInputType
  }

  export type GetBookRatingsAggregateType<T extends BookRatingsAggregateArgs> = {
        [P in keyof T & keyof AggregateBookRatings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookRatings[P]>
      : GetScalarType<T[P], AggregateBookRatings[P]>
  }




  export type BookRatingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookRatingsWhereInput
    orderBy?: BookRatingsOrderByWithAggregationInput | BookRatingsOrderByWithAggregationInput[]
    by: BookRatingsScalarFieldEnum[] | BookRatingsScalarFieldEnum
    having?: BookRatingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookRatingsCountAggregateInputType | true
    _avg?: BookRatingsAvgAggregateInputType
    _sum?: BookRatingsSumAggregateInputType
    _min?: BookRatingsMinAggregateInputType
    _max?: BookRatingsMaxAggregateInputType
  }

  export type BookRatingsGroupByOutputType = {
    RatingId: number
    BorrowId: number
    Rating: number
    RatingDate: Date
    _count: BookRatingsCountAggregateOutputType | null
    _avg: BookRatingsAvgAggregateOutputType | null
    _sum: BookRatingsSumAggregateOutputType | null
    _min: BookRatingsMinAggregateOutputType | null
    _max: BookRatingsMaxAggregateOutputType | null
  }

  type GetBookRatingsGroupByPayload<T extends BookRatingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookRatingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookRatingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookRatingsGroupByOutputType[P]>
            : GetScalarType<T[P], BookRatingsGroupByOutputType[P]>
        }
      >
    >


  export type BookRatingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    RatingId?: boolean
    BorrowId?: boolean
    Rating?: boolean
    RatingDate?: boolean
    BorrowedBooks?: boolean | BorrowedBooksDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookRatings"]>



  export type BookRatingsSelectScalar = {
    RatingId?: boolean
    BorrowId?: boolean
    Rating?: boolean
    RatingDate?: boolean
  }

  export type BookRatingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"RatingId" | "BorrowId" | "Rating" | "RatingDate", ExtArgs["result"]["bookRatings"]>
  export type BookRatingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BorrowedBooks?: boolean | BorrowedBooksDefaultArgs<ExtArgs>
  }

  export type $BookRatingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookRatings"
    objects: {
      BorrowedBooks: Prisma.$BorrowedBooksPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      RatingId: number
      BorrowId: number
      Rating: number
      RatingDate: Date
    }, ExtArgs["result"]["bookRatings"]>
    composites: {}
  }

  type BookRatingsGetPayload<S extends boolean | null | undefined | BookRatingsDefaultArgs> = $Result.GetResult<Prisma.$BookRatingsPayload, S>

  type BookRatingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookRatingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookRatingsCountAggregateInputType | true
    }

  export interface BookRatingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookRatings'], meta: { name: 'BookRatings' } }
    /**
     * Find zero or one BookRatings that matches the filter.
     * @param {BookRatingsFindUniqueArgs} args - Arguments to find a BookRatings
     * @example
     * // Get one BookRatings
     * const bookRatings = await prisma.bookRatings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookRatingsFindUniqueArgs>(args: SelectSubset<T, BookRatingsFindUniqueArgs<ExtArgs>>): Prisma__BookRatingsClient<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BookRatings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookRatingsFindUniqueOrThrowArgs} args - Arguments to find a BookRatings
     * @example
     * // Get one BookRatings
     * const bookRatings = await prisma.bookRatings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookRatingsFindUniqueOrThrowArgs>(args: SelectSubset<T, BookRatingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookRatingsClient<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BookRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookRatingsFindFirstArgs} args - Arguments to find a BookRatings
     * @example
     * // Get one BookRatings
     * const bookRatings = await prisma.bookRatings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookRatingsFindFirstArgs>(args?: SelectSubset<T, BookRatingsFindFirstArgs<ExtArgs>>): Prisma__BookRatingsClient<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BookRatings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookRatingsFindFirstOrThrowArgs} args - Arguments to find a BookRatings
     * @example
     * // Get one BookRatings
     * const bookRatings = await prisma.bookRatings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookRatingsFindFirstOrThrowArgs>(args?: SelectSubset<T, BookRatingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookRatingsClient<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BookRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookRatingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookRatings
     * const bookRatings = await prisma.bookRatings.findMany()
     * 
     * // Get first 10 BookRatings
     * const bookRatings = await prisma.bookRatings.findMany({ take: 10 })
     * 
     * // Only select the `RatingId`
     * const bookRatingsWithRatingIdOnly = await prisma.bookRatings.findMany({ select: { RatingId: true } })
     * 
     */
    findMany<T extends BookRatingsFindManyArgs>(args?: SelectSubset<T, BookRatingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BookRatings.
     * @param {BookRatingsCreateArgs} args - Arguments to create a BookRatings.
     * @example
     * // Create one BookRatings
     * const BookRatings = await prisma.bookRatings.create({
     *   data: {
     *     // ... data to create a BookRatings
     *   }
     * })
     * 
     */
    create<T extends BookRatingsCreateArgs>(args: SelectSubset<T, BookRatingsCreateArgs<ExtArgs>>): Prisma__BookRatingsClient<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BookRatings.
     * @param {BookRatingsCreateManyArgs} args - Arguments to create many BookRatings.
     * @example
     * // Create many BookRatings
     * const bookRatings = await prisma.bookRatings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookRatingsCreateManyArgs>(args?: SelectSubset<T, BookRatingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BookRatings.
     * @param {BookRatingsDeleteArgs} args - Arguments to delete one BookRatings.
     * @example
     * // Delete one BookRatings
     * const BookRatings = await prisma.bookRatings.delete({
     *   where: {
     *     // ... filter to delete one BookRatings
     *   }
     * })
     * 
     */
    delete<T extends BookRatingsDeleteArgs>(args: SelectSubset<T, BookRatingsDeleteArgs<ExtArgs>>): Prisma__BookRatingsClient<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BookRatings.
     * @param {BookRatingsUpdateArgs} args - Arguments to update one BookRatings.
     * @example
     * // Update one BookRatings
     * const bookRatings = await prisma.bookRatings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookRatingsUpdateArgs>(args: SelectSubset<T, BookRatingsUpdateArgs<ExtArgs>>): Prisma__BookRatingsClient<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BookRatings.
     * @param {BookRatingsDeleteManyArgs} args - Arguments to filter BookRatings to delete.
     * @example
     * // Delete a few BookRatings
     * const { count } = await prisma.bookRatings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookRatingsDeleteManyArgs>(args?: SelectSubset<T, BookRatingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookRatingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookRatings
     * const bookRatings = await prisma.bookRatings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookRatingsUpdateManyArgs>(args: SelectSubset<T, BookRatingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookRatings.
     * @param {BookRatingsUpsertArgs} args - Arguments to update or create a BookRatings.
     * @example
     * // Update or create a BookRatings
     * const bookRatings = await prisma.bookRatings.upsert({
     *   create: {
     *     // ... data to create a BookRatings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookRatings we want to update
     *   }
     * })
     */
    upsert<T extends BookRatingsUpsertArgs>(args: SelectSubset<T, BookRatingsUpsertArgs<ExtArgs>>): Prisma__BookRatingsClient<$Result.GetResult<Prisma.$BookRatingsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BookRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookRatingsCountArgs} args - Arguments to filter BookRatings to count.
     * @example
     * // Count the number of BookRatings
     * const count = await prisma.bookRatings.count({
     *   where: {
     *     // ... the filter for the BookRatings we want to count
     *   }
     * })
    **/
    count<T extends BookRatingsCountArgs>(
      args?: Subset<T, BookRatingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookRatingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookRatingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookRatingsAggregateArgs>(args: Subset<T, BookRatingsAggregateArgs>): Prisma.PrismaPromise<GetBookRatingsAggregateType<T>>

    /**
     * Group by BookRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookRatingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookRatingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookRatingsGroupByArgs['orderBy'] }
        : { orderBy?: BookRatingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookRatingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookRatingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookRatings model
   */
  readonly fields: BookRatingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookRatings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookRatingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    BorrowedBooks<T extends BorrowedBooksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BorrowedBooksDefaultArgs<ExtArgs>>): Prisma__BorrowedBooksClient<$Result.GetResult<Prisma.$BorrowedBooksPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookRatings model
   */ 
  interface BookRatingsFieldRefs {
    readonly RatingId: FieldRef<"BookRatings", 'Int'>
    readonly BorrowId: FieldRef<"BookRatings", 'Int'>
    readonly Rating: FieldRef<"BookRatings", 'Int'>
    readonly RatingDate: FieldRef<"BookRatings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookRatings findUnique
   */
  export type BookRatingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    /**
     * Filter, which BookRatings to fetch.
     */
    where: BookRatingsWhereUniqueInput
  }

  /**
   * BookRatings findUniqueOrThrow
   */
  export type BookRatingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    /**
     * Filter, which BookRatings to fetch.
     */
    where: BookRatingsWhereUniqueInput
  }

  /**
   * BookRatings findFirst
   */
  export type BookRatingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    /**
     * Filter, which BookRatings to fetch.
     */
    where?: BookRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookRatings to fetch.
     */
    orderBy?: BookRatingsOrderByWithRelationInput | BookRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookRatings.
     */
    cursor?: BookRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookRatings.
     */
    distinct?: BookRatingsScalarFieldEnum | BookRatingsScalarFieldEnum[]
  }

  /**
   * BookRatings findFirstOrThrow
   */
  export type BookRatingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    /**
     * Filter, which BookRatings to fetch.
     */
    where?: BookRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookRatings to fetch.
     */
    orderBy?: BookRatingsOrderByWithRelationInput | BookRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookRatings.
     */
    cursor?: BookRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookRatings.
     */
    distinct?: BookRatingsScalarFieldEnum | BookRatingsScalarFieldEnum[]
  }

  /**
   * BookRatings findMany
   */
  export type BookRatingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    /**
     * Filter, which BookRatings to fetch.
     */
    where?: BookRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookRatings to fetch.
     */
    orderBy?: BookRatingsOrderByWithRelationInput | BookRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookRatings.
     */
    cursor?: BookRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookRatings.
     */
    skip?: number
    distinct?: BookRatingsScalarFieldEnum | BookRatingsScalarFieldEnum[]
  }

  /**
   * BookRatings create
   */
  export type BookRatingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    /**
     * The data needed to create a BookRatings.
     */
    data: XOR<BookRatingsCreateInput, BookRatingsUncheckedCreateInput>
  }

  /**
   * BookRatings createMany
   */
  export type BookRatingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookRatings.
     */
    data: BookRatingsCreateManyInput | BookRatingsCreateManyInput[]
  }

  /**
   * BookRatings update
   */
  export type BookRatingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    /**
     * The data needed to update a BookRatings.
     */
    data: XOR<BookRatingsUpdateInput, BookRatingsUncheckedUpdateInput>
    /**
     * Choose, which BookRatings to update.
     */
    where: BookRatingsWhereUniqueInput
  }

  /**
   * BookRatings updateMany
   */
  export type BookRatingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookRatings.
     */
    data: XOR<BookRatingsUpdateManyMutationInput, BookRatingsUncheckedUpdateManyInput>
    /**
     * Filter which BookRatings to update
     */
    where?: BookRatingsWhereInput
    /**
     * Limit how many BookRatings to update.
     */
    limit?: number
  }

  /**
   * BookRatings upsert
   */
  export type BookRatingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    /**
     * The filter to search for the BookRatings to update in case it exists.
     */
    where: BookRatingsWhereUniqueInput
    /**
     * In case the BookRatings found by the `where` argument doesn't exist, create a new BookRatings with this data.
     */
    create: XOR<BookRatingsCreateInput, BookRatingsUncheckedCreateInput>
    /**
     * In case the BookRatings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookRatingsUpdateInput, BookRatingsUncheckedUpdateInput>
  }

  /**
   * BookRatings delete
   */
  export type BookRatingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
    /**
     * Filter which BookRatings to delete.
     */
    where: BookRatingsWhereUniqueInput
  }

  /**
   * BookRatings deleteMany
   */
  export type BookRatingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookRatings to delete
     */
    where?: BookRatingsWhereInput
    /**
     * Limit how many BookRatings to delete.
     */
    limit?: number
  }

  /**
   * BookRatings without action
   */
  export type BookRatingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookRatings
     */
    select?: BookRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookRatings
     */
    omit?: BookRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookRatingsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    UserId: 'UserId',
    Name: 'Name'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const BooksScalarFieldEnum: {
    BookId: 'BookId',
    Title: 'Title',
    Author: 'Author',
    PublishedYear: 'PublishedYear'
  };

  export type BooksScalarFieldEnum = (typeof BooksScalarFieldEnum)[keyof typeof BooksScalarFieldEnum]


  export const BorrowedBooksScalarFieldEnum: {
    BorrowId: 'BorrowId',
    UserId: 'UserId',
    BookId: 'BookId',
    BorrowDate: 'BorrowDate',
    ReturnDate: 'ReturnDate'
  };

  export type BorrowedBooksScalarFieldEnum = (typeof BorrowedBooksScalarFieldEnum)[keyof typeof BorrowedBooksScalarFieldEnum]


  export const BookRatingsScalarFieldEnum: {
    RatingId: 'RatingId',
    BorrowId: 'BorrowId',
    Rating: 'Rating',
    RatingDate: 'RatingDate'
  };

  export type BookRatingsScalarFieldEnum = (typeof BookRatingsScalarFieldEnum)[keyof typeof BookRatingsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    UserId?: IntFilter<"Users"> | number
    Name?: StringFilter<"Users"> | string
    BorrowedBooks?: BorrowedBooksListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    UserId?: SortOrder
    Name?: SortOrder
    BorrowedBooks?: BorrowedBooksOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    UserId?: number
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    Name?: StringFilter<"Users"> | string
    BorrowedBooks?: BorrowedBooksListRelationFilter
  }, "UserId">

  export type UsersOrderByWithAggregationInput = {
    UserId?: SortOrder
    Name?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    UserId?: IntWithAggregatesFilter<"Users"> | number
    Name?: StringWithAggregatesFilter<"Users"> | string
  }

  export type BooksWhereInput = {
    AND?: BooksWhereInput | BooksWhereInput[]
    OR?: BooksWhereInput[]
    NOT?: BooksWhereInput | BooksWhereInput[]
    BookId?: IntFilter<"Books"> | number
    Title?: StringFilter<"Books"> | string
    Author?: StringFilter<"Books"> | string
    PublishedYear?: IntNullableFilter<"Books"> | number | null
    BorrowedBooks?: BorrowedBooksListRelationFilter
  }

  export type BooksOrderByWithRelationInput = {
    BookId?: SortOrder
    Title?: SortOrder
    Author?: SortOrder
    PublishedYear?: SortOrderInput | SortOrder
    BorrowedBooks?: BorrowedBooksOrderByRelationAggregateInput
  }

  export type BooksWhereUniqueInput = Prisma.AtLeast<{
    BookId?: number
    AND?: BooksWhereInput | BooksWhereInput[]
    OR?: BooksWhereInput[]
    NOT?: BooksWhereInput | BooksWhereInput[]
    Title?: StringFilter<"Books"> | string
    Author?: StringFilter<"Books"> | string
    PublishedYear?: IntNullableFilter<"Books"> | number | null
    BorrowedBooks?: BorrowedBooksListRelationFilter
  }, "BookId">

  export type BooksOrderByWithAggregationInput = {
    BookId?: SortOrder
    Title?: SortOrder
    Author?: SortOrder
    PublishedYear?: SortOrderInput | SortOrder
    _count?: BooksCountOrderByAggregateInput
    _avg?: BooksAvgOrderByAggregateInput
    _max?: BooksMaxOrderByAggregateInput
    _min?: BooksMinOrderByAggregateInput
    _sum?: BooksSumOrderByAggregateInput
  }

  export type BooksScalarWhereWithAggregatesInput = {
    AND?: BooksScalarWhereWithAggregatesInput | BooksScalarWhereWithAggregatesInput[]
    OR?: BooksScalarWhereWithAggregatesInput[]
    NOT?: BooksScalarWhereWithAggregatesInput | BooksScalarWhereWithAggregatesInput[]
    BookId?: IntWithAggregatesFilter<"Books"> | number
    Title?: StringWithAggregatesFilter<"Books"> | string
    Author?: StringWithAggregatesFilter<"Books"> | string
    PublishedYear?: IntNullableWithAggregatesFilter<"Books"> | number | null
  }

  export type BorrowedBooksWhereInput = {
    AND?: BorrowedBooksWhereInput | BorrowedBooksWhereInput[]
    OR?: BorrowedBooksWhereInput[]
    NOT?: BorrowedBooksWhereInput | BorrowedBooksWhereInput[]
    BorrowId?: IntFilter<"BorrowedBooks"> | number
    UserId?: IntFilter<"BorrowedBooks"> | number
    BookId?: IntFilter<"BorrowedBooks"> | number
    BorrowDate?: DateTimeFilter<"BorrowedBooks"> | Date | string
    ReturnDate?: DateTimeNullableFilter<"BorrowedBooks"> | Date | string | null
    BookRatings?: BookRatingsListRelationFilter
    Books?: XOR<BooksScalarRelationFilter, BooksWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type BorrowedBooksOrderByWithRelationInput = {
    BorrowId?: SortOrder
    UserId?: SortOrder
    BookId?: SortOrder
    BorrowDate?: SortOrder
    ReturnDate?: SortOrderInput | SortOrder
    BookRatings?: BookRatingsOrderByRelationAggregateInput
    Books?: BooksOrderByWithRelationInput
    Users?: UsersOrderByWithRelationInput
  }

  export type BorrowedBooksWhereUniqueInput = Prisma.AtLeast<{
    BorrowId?: number
    AND?: BorrowedBooksWhereInput | BorrowedBooksWhereInput[]
    OR?: BorrowedBooksWhereInput[]
    NOT?: BorrowedBooksWhereInput | BorrowedBooksWhereInput[]
    UserId?: IntFilter<"BorrowedBooks"> | number
    BookId?: IntFilter<"BorrowedBooks"> | number
    BorrowDate?: DateTimeFilter<"BorrowedBooks"> | Date | string
    ReturnDate?: DateTimeNullableFilter<"BorrowedBooks"> | Date | string | null
    BookRatings?: BookRatingsListRelationFilter
    Books?: XOR<BooksScalarRelationFilter, BooksWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "BorrowId">

  export type BorrowedBooksOrderByWithAggregationInput = {
    BorrowId?: SortOrder
    UserId?: SortOrder
    BookId?: SortOrder
    BorrowDate?: SortOrder
    ReturnDate?: SortOrderInput | SortOrder
    _count?: BorrowedBooksCountOrderByAggregateInput
    _avg?: BorrowedBooksAvgOrderByAggregateInput
    _max?: BorrowedBooksMaxOrderByAggregateInput
    _min?: BorrowedBooksMinOrderByAggregateInput
    _sum?: BorrowedBooksSumOrderByAggregateInput
  }

  export type BorrowedBooksScalarWhereWithAggregatesInput = {
    AND?: BorrowedBooksScalarWhereWithAggregatesInput | BorrowedBooksScalarWhereWithAggregatesInput[]
    OR?: BorrowedBooksScalarWhereWithAggregatesInput[]
    NOT?: BorrowedBooksScalarWhereWithAggregatesInput | BorrowedBooksScalarWhereWithAggregatesInput[]
    BorrowId?: IntWithAggregatesFilter<"BorrowedBooks"> | number
    UserId?: IntWithAggregatesFilter<"BorrowedBooks"> | number
    BookId?: IntWithAggregatesFilter<"BorrowedBooks"> | number
    BorrowDate?: DateTimeWithAggregatesFilter<"BorrowedBooks"> | Date | string
    ReturnDate?: DateTimeNullableWithAggregatesFilter<"BorrowedBooks"> | Date | string | null
  }

  export type BookRatingsWhereInput = {
    AND?: BookRatingsWhereInput | BookRatingsWhereInput[]
    OR?: BookRatingsWhereInput[]
    NOT?: BookRatingsWhereInput | BookRatingsWhereInput[]
    RatingId?: IntFilter<"BookRatings"> | number
    BorrowId?: IntFilter<"BookRatings"> | number
    Rating?: IntFilter<"BookRatings"> | number
    RatingDate?: DateTimeFilter<"BookRatings"> | Date | string
    BorrowedBooks?: XOR<BorrowedBooksScalarRelationFilter, BorrowedBooksWhereInput>
  }

  export type BookRatingsOrderByWithRelationInput = {
    RatingId?: SortOrder
    BorrowId?: SortOrder
    Rating?: SortOrder
    RatingDate?: SortOrder
    BorrowedBooks?: BorrowedBooksOrderByWithRelationInput
  }

  export type BookRatingsWhereUniqueInput = Prisma.AtLeast<{
    RatingId?: number
    AND?: BookRatingsWhereInput | BookRatingsWhereInput[]
    OR?: BookRatingsWhereInput[]
    NOT?: BookRatingsWhereInput | BookRatingsWhereInput[]
    BorrowId?: IntFilter<"BookRatings"> | number
    Rating?: IntFilter<"BookRatings"> | number
    RatingDate?: DateTimeFilter<"BookRatings"> | Date | string
    BorrowedBooks?: XOR<BorrowedBooksScalarRelationFilter, BorrowedBooksWhereInput>
  }, "RatingId">

  export type BookRatingsOrderByWithAggregationInput = {
    RatingId?: SortOrder
    BorrowId?: SortOrder
    Rating?: SortOrder
    RatingDate?: SortOrder
    _count?: BookRatingsCountOrderByAggregateInput
    _avg?: BookRatingsAvgOrderByAggregateInput
    _max?: BookRatingsMaxOrderByAggregateInput
    _min?: BookRatingsMinOrderByAggregateInput
    _sum?: BookRatingsSumOrderByAggregateInput
  }

  export type BookRatingsScalarWhereWithAggregatesInput = {
    AND?: BookRatingsScalarWhereWithAggregatesInput | BookRatingsScalarWhereWithAggregatesInput[]
    OR?: BookRatingsScalarWhereWithAggregatesInput[]
    NOT?: BookRatingsScalarWhereWithAggregatesInput | BookRatingsScalarWhereWithAggregatesInput[]
    RatingId?: IntWithAggregatesFilter<"BookRatings"> | number
    BorrowId?: IntWithAggregatesFilter<"BookRatings"> | number
    Rating?: IntWithAggregatesFilter<"BookRatings"> | number
    RatingDate?: DateTimeWithAggregatesFilter<"BookRatings"> | Date | string
  }

  export type UsersCreateInput = {
    Name: string
    BorrowedBooks?: BorrowedBooksCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    UserId?: number
    Name: string
    BorrowedBooks?: BorrowedBooksUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    BorrowedBooks?: BorrowedBooksUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    BorrowedBooks?: BorrowedBooksUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    Name: string
  }

  export type UsersUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateManyInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type BooksCreateInput = {
    Title: string
    Author: string
    PublishedYear?: number | null
    BorrowedBooks?: BorrowedBooksCreateNestedManyWithoutBooksInput
  }

  export type BooksUncheckedCreateInput = {
    BookId?: number
    Title: string
    Author: string
    PublishedYear?: number | null
    BorrowedBooks?: BorrowedBooksUncheckedCreateNestedManyWithoutBooksInput
  }

  export type BooksUpdateInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PublishedYear?: NullableIntFieldUpdateOperationsInput | number | null
    BorrowedBooks?: BorrowedBooksUpdateManyWithoutBooksNestedInput
  }

  export type BooksUncheckedUpdateInput = {
    BookId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PublishedYear?: NullableIntFieldUpdateOperationsInput | number | null
    BorrowedBooks?: BorrowedBooksUncheckedUpdateManyWithoutBooksNestedInput
  }

  export type BooksCreateManyInput = {
    Title: string
    Author: string
    PublishedYear?: number | null
  }

  export type BooksUpdateManyMutationInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PublishedYear?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BooksUncheckedUpdateManyInput = {
    BookId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PublishedYear?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BorrowedBooksCreateInput = {
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
    BookRatings?: BookRatingsCreateNestedManyWithoutBorrowedBooksInput
    Books: BooksCreateNestedOneWithoutBorrowedBooksInput
    Users: UsersCreateNestedOneWithoutBorrowedBooksInput
  }

  export type BorrowedBooksUncheckedCreateInput = {
    BorrowId?: number
    UserId: number
    BookId: number
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
    BookRatings?: BookRatingsUncheckedCreateNestedManyWithoutBorrowedBooksInput
  }

  export type BorrowedBooksUpdateInput = {
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BookRatings?: BookRatingsUpdateManyWithoutBorrowedBooksNestedInput
    Books?: BooksUpdateOneRequiredWithoutBorrowedBooksNestedInput
    Users?: UsersUpdateOneRequiredWithoutBorrowedBooksNestedInput
  }

  export type BorrowedBooksUncheckedUpdateInput = {
    BorrowId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    BookId?: IntFieldUpdateOperationsInput | number
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BookRatings?: BookRatingsUncheckedUpdateManyWithoutBorrowedBooksNestedInput
  }

  export type BorrowedBooksCreateManyInput = {
    UserId: number
    BookId: number
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
  }

  export type BorrowedBooksUpdateManyMutationInput = {
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BorrowedBooksUncheckedUpdateManyInput = {
    BorrowId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    BookId?: IntFieldUpdateOperationsInput | number
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BookRatingsCreateInput = {
    Rating: number
    RatingDate: Date | string
    BorrowedBooks: BorrowedBooksCreateNestedOneWithoutBookRatingsInput
  }

  export type BookRatingsUncheckedCreateInput = {
    RatingId?: number
    BorrowId: number
    Rating: number
    RatingDate: Date | string
  }

  export type BookRatingsUpdateInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    RatingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    BorrowedBooks?: BorrowedBooksUpdateOneRequiredWithoutBookRatingsNestedInput
  }

  export type BookRatingsUncheckedUpdateInput = {
    RatingId?: IntFieldUpdateOperationsInput | number
    BorrowId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    RatingDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookRatingsCreateManyInput = {
    BorrowId: number
    Rating: number
    RatingDate: Date | string
  }

  export type BookRatingsUpdateManyMutationInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    RatingDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookRatingsUncheckedUpdateManyInput = {
    RatingId?: IntFieldUpdateOperationsInput | number
    BorrowId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    RatingDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BorrowedBooksListRelationFilter = {
    every?: BorrowedBooksWhereInput
    some?: BorrowedBooksWhereInput
    none?: BorrowedBooksWhereInput
  }

  export type BorrowedBooksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    UserId?: SortOrder
    Name?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    UserId?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    UserId?: SortOrder
    Name?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    UserId?: SortOrder
    Name?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    UserId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BooksCountOrderByAggregateInput = {
    BookId?: SortOrder
    Title?: SortOrder
    Author?: SortOrder
    PublishedYear?: SortOrder
  }

  export type BooksAvgOrderByAggregateInput = {
    BookId?: SortOrder
    PublishedYear?: SortOrder
  }

  export type BooksMaxOrderByAggregateInput = {
    BookId?: SortOrder
    Title?: SortOrder
    Author?: SortOrder
    PublishedYear?: SortOrder
  }

  export type BooksMinOrderByAggregateInput = {
    BookId?: SortOrder
    Title?: SortOrder
    Author?: SortOrder
    PublishedYear?: SortOrder
  }

  export type BooksSumOrderByAggregateInput = {
    BookId?: SortOrder
    PublishedYear?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BookRatingsListRelationFilter = {
    every?: BookRatingsWhereInput
    some?: BookRatingsWhereInput
    none?: BookRatingsWhereInput
  }

  export type BooksScalarRelationFilter = {
    is?: BooksWhereInput
    isNot?: BooksWhereInput
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type BookRatingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BorrowedBooksCountOrderByAggregateInput = {
    BorrowId?: SortOrder
    UserId?: SortOrder
    BookId?: SortOrder
    BorrowDate?: SortOrder
    ReturnDate?: SortOrder
  }

  export type BorrowedBooksAvgOrderByAggregateInput = {
    BorrowId?: SortOrder
    UserId?: SortOrder
    BookId?: SortOrder
  }

  export type BorrowedBooksMaxOrderByAggregateInput = {
    BorrowId?: SortOrder
    UserId?: SortOrder
    BookId?: SortOrder
    BorrowDate?: SortOrder
    ReturnDate?: SortOrder
  }

  export type BorrowedBooksMinOrderByAggregateInput = {
    BorrowId?: SortOrder
    UserId?: SortOrder
    BookId?: SortOrder
    BorrowDate?: SortOrder
    ReturnDate?: SortOrder
  }

  export type BorrowedBooksSumOrderByAggregateInput = {
    BorrowId?: SortOrder
    UserId?: SortOrder
    BookId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BorrowedBooksScalarRelationFilter = {
    is?: BorrowedBooksWhereInput
    isNot?: BorrowedBooksWhereInput
  }

  export type BookRatingsCountOrderByAggregateInput = {
    RatingId?: SortOrder
    BorrowId?: SortOrder
    Rating?: SortOrder
    RatingDate?: SortOrder
  }

  export type BookRatingsAvgOrderByAggregateInput = {
    RatingId?: SortOrder
    BorrowId?: SortOrder
    Rating?: SortOrder
  }

  export type BookRatingsMaxOrderByAggregateInput = {
    RatingId?: SortOrder
    BorrowId?: SortOrder
    Rating?: SortOrder
    RatingDate?: SortOrder
  }

  export type BookRatingsMinOrderByAggregateInput = {
    RatingId?: SortOrder
    BorrowId?: SortOrder
    Rating?: SortOrder
    RatingDate?: SortOrder
  }

  export type BookRatingsSumOrderByAggregateInput = {
    RatingId?: SortOrder
    BorrowId?: SortOrder
    Rating?: SortOrder
  }

  export type BorrowedBooksCreateNestedManyWithoutUsersInput = {
    create?: XOR<BorrowedBooksCreateWithoutUsersInput, BorrowedBooksUncheckedCreateWithoutUsersInput> | BorrowedBooksCreateWithoutUsersInput[] | BorrowedBooksUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutUsersInput | BorrowedBooksCreateOrConnectWithoutUsersInput[]
    createMany?: BorrowedBooksCreateManyUsersInputEnvelope
    connect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
  }

  export type BorrowedBooksUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<BorrowedBooksCreateWithoutUsersInput, BorrowedBooksUncheckedCreateWithoutUsersInput> | BorrowedBooksCreateWithoutUsersInput[] | BorrowedBooksUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutUsersInput | BorrowedBooksCreateOrConnectWithoutUsersInput[]
    createMany?: BorrowedBooksCreateManyUsersInputEnvelope
    connect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BorrowedBooksUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BorrowedBooksCreateWithoutUsersInput, BorrowedBooksUncheckedCreateWithoutUsersInput> | BorrowedBooksCreateWithoutUsersInput[] | BorrowedBooksUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutUsersInput | BorrowedBooksCreateOrConnectWithoutUsersInput[]
    upsert?: BorrowedBooksUpsertWithWhereUniqueWithoutUsersInput | BorrowedBooksUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BorrowedBooksCreateManyUsersInputEnvelope
    set?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    disconnect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    delete?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    connect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    update?: BorrowedBooksUpdateWithWhereUniqueWithoutUsersInput | BorrowedBooksUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BorrowedBooksUpdateManyWithWhereWithoutUsersInput | BorrowedBooksUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BorrowedBooksScalarWhereInput | BorrowedBooksScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BorrowedBooksUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BorrowedBooksCreateWithoutUsersInput, BorrowedBooksUncheckedCreateWithoutUsersInput> | BorrowedBooksCreateWithoutUsersInput[] | BorrowedBooksUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutUsersInput | BorrowedBooksCreateOrConnectWithoutUsersInput[]
    upsert?: BorrowedBooksUpsertWithWhereUniqueWithoutUsersInput | BorrowedBooksUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BorrowedBooksCreateManyUsersInputEnvelope
    set?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    disconnect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    delete?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    connect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    update?: BorrowedBooksUpdateWithWhereUniqueWithoutUsersInput | BorrowedBooksUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BorrowedBooksUpdateManyWithWhereWithoutUsersInput | BorrowedBooksUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BorrowedBooksScalarWhereInput | BorrowedBooksScalarWhereInput[]
  }

  export type BorrowedBooksCreateNestedManyWithoutBooksInput = {
    create?: XOR<BorrowedBooksCreateWithoutBooksInput, BorrowedBooksUncheckedCreateWithoutBooksInput> | BorrowedBooksCreateWithoutBooksInput[] | BorrowedBooksUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutBooksInput | BorrowedBooksCreateOrConnectWithoutBooksInput[]
    createMany?: BorrowedBooksCreateManyBooksInputEnvelope
    connect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
  }

  export type BorrowedBooksUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<BorrowedBooksCreateWithoutBooksInput, BorrowedBooksUncheckedCreateWithoutBooksInput> | BorrowedBooksCreateWithoutBooksInput[] | BorrowedBooksUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutBooksInput | BorrowedBooksCreateOrConnectWithoutBooksInput[]
    createMany?: BorrowedBooksCreateManyBooksInputEnvelope
    connect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BorrowedBooksUpdateManyWithoutBooksNestedInput = {
    create?: XOR<BorrowedBooksCreateWithoutBooksInput, BorrowedBooksUncheckedCreateWithoutBooksInput> | BorrowedBooksCreateWithoutBooksInput[] | BorrowedBooksUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutBooksInput | BorrowedBooksCreateOrConnectWithoutBooksInput[]
    upsert?: BorrowedBooksUpsertWithWhereUniqueWithoutBooksInput | BorrowedBooksUpsertWithWhereUniqueWithoutBooksInput[]
    createMany?: BorrowedBooksCreateManyBooksInputEnvelope
    set?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    disconnect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    delete?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    connect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    update?: BorrowedBooksUpdateWithWhereUniqueWithoutBooksInput | BorrowedBooksUpdateWithWhereUniqueWithoutBooksInput[]
    updateMany?: BorrowedBooksUpdateManyWithWhereWithoutBooksInput | BorrowedBooksUpdateManyWithWhereWithoutBooksInput[]
    deleteMany?: BorrowedBooksScalarWhereInput | BorrowedBooksScalarWhereInput[]
  }

  export type BorrowedBooksUncheckedUpdateManyWithoutBooksNestedInput = {
    create?: XOR<BorrowedBooksCreateWithoutBooksInput, BorrowedBooksUncheckedCreateWithoutBooksInput> | BorrowedBooksCreateWithoutBooksInput[] | BorrowedBooksUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutBooksInput | BorrowedBooksCreateOrConnectWithoutBooksInput[]
    upsert?: BorrowedBooksUpsertWithWhereUniqueWithoutBooksInput | BorrowedBooksUpsertWithWhereUniqueWithoutBooksInput[]
    createMany?: BorrowedBooksCreateManyBooksInputEnvelope
    set?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    disconnect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    delete?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    connect?: BorrowedBooksWhereUniqueInput | BorrowedBooksWhereUniqueInput[]
    update?: BorrowedBooksUpdateWithWhereUniqueWithoutBooksInput | BorrowedBooksUpdateWithWhereUniqueWithoutBooksInput[]
    updateMany?: BorrowedBooksUpdateManyWithWhereWithoutBooksInput | BorrowedBooksUpdateManyWithWhereWithoutBooksInput[]
    deleteMany?: BorrowedBooksScalarWhereInput | BorrowedBooksScalarWhereInput[]
  }

  export type BookRatingsCreateNestedManyWithoutBorrowedBooksInput = {
    create?: XOR<BookRatingsCreateWithoutBorrowedBooksInput, BookRatingsUncheckedCreateWithoutBorrowedBooksInput> | BookRatingsCreateWithoutBorrowedBooksInput[] | BookRatingsUncheckedCreateWithoutBorrowedBooksInput[]
    connectOrCreate?: BookRatingsCreateOrConnectWithoutBorrowedBooksInput | BookRatingsCreateOrConnectWithoutBorrowedBooksInput[]
    createMany?: BookRatingsCreateManyBorrowedBooksInputEnvelope
    connect?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
  }

  export type BooksCreateNestedOneWithoutBorrowedBooksInput = {
    create?: XOR<BooksCreateWithoutBorrowedBooksInput, BooksUncheckedCreateWithoutBorrowedBooksInput>
    connectOrCreate?: BooksCreateOrConnectWithoutBorrowedBooksInput
    connect?: BooksWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutBorrowedBooksInput = {
    create?: XOR<UsersCreateWithoutBorrowedBooksInput, UsersUncheckedCreateWithoutBorrowedBooksInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBorrowedBooksInput
    connect?: UsersWhereUniqueInput
  }

  export type BookRatingsUncheckedCreateNestedManyWithoutBorrowedBooksInput = {
    create?: XOR<BookRatingsCreateWithoutBorrowedBooksInput, BookRatingsUncheckedCreateWithoutBorrowedBooksInput> | BookRatingsCreateWithoutBorrowedBooksInput[] | BookRatingsUncheckedCreateWithoutBorrowedBooksInput[]
    connectOrCreate?: BookRatingsCreateOrConnectWithoutBorrowedBooksInput | BookRatingsCreateOrConnectWithoutBorrowedBooksInput[]
    createMany?: BookRatingsCreateManyBorrowedBooksInputEnvelope
    connect?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BookRatingsUpdateManyWithoutBorrowedBooksNestedInput = {
    create?: XOR<BookRatingsCreateWithoutBorrowedBooksInput, BookRatingsUncheckedCreateWithoutBorrowedBooksInput> | BookRatingsCreateWithoutBorrowedBooksInput[] | BookRatingsUncheckedCreateWithoutBorrowedBooksInput[]
    connectOrCreate?: BookRatingsCreateOrConnectWithoutBorrowedBooksInput | BookRatingsCreateOrConnectWithoutBorrowedBooksInput[]
    upsert?: BookRatingsUpsertWithWhereUniqueWithoutBorrowedBooksInput | BookRatingsUpsertWithWhereUniqueWithoutBorrowedBooksInput[]
    createMany?: BookRatingsCreateManyBorrowedBooksInputEnvelope
    set?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
    disconnect?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
    delete?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
    connect?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
    update?: BookRatingsUpdateWithWhereUniqueWithoutBorrowedBooksInput | BookRatingsUpdateWithWhereUniqueWithoutBorrowedBooksInput[]
    updateMany?: BookRatingsUpdateManyWithWhereWithoutBorrowedBooksInput | BookRatingsUpdateManyWithWhereWithoutBorrowedBooksInput[]
    deleteMany?: BookRatingsScalarWhereInput | BookRatingsScalarWhereInput[]
  }

  export type BooksUpdateOneRequiredWithoutBorrowedBooksNestedInput = {
    create?: XOR<BooksCreateWithoutBorrowedBooksInput, BooksUncheckedCreateWithoutBorrowedBooksInput>
    connectOrCreate?: BooksCreateOrConnectWithoutBorrowedBooksInput
    upsert?: BooksUpsertWithoutBorrowedBooksInput
    connect?: BooksWhereUniqueInput
    update?: XOR<XOR<BooksUpdateToOneWithWhereWithoutBorrowedBooksInput, BooksUpdateWithoutBorrowedBooksInput>, BooksUncheckedUpdateWithoutBorrowedBooksInput>
  }

  export type UsersUpdateOneRequiredWithoutBorrowedBooksNestedInput = {
    create?: XOR<UsersCreateWithoutBorrowedBooksInput, UsersUncheckedCreateWithoutBorrowedBooksInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBorrowedBooksInput
    upsert?: UsersUpsertWithoutBorrowedBooksInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutBorrowedBooksInput, UsersUpdateWithoutBorrowedBooksInput>, UsersUncheckedUpdateWithoutBorrowedBooksInput>
  }

  export type BookRatingsUncheckedUpdateManyWithoutBorrowedBooksNestedInput = {
    create?: XOR<BookRatingsCreateWithoutBorrowedBooksInput, BookRatingsUncheckedCreateWithoutBorrowedBooksInput> | BookRatingsCreateWithoutBorrowedBooksInput[] | BookRatingsUncheckedCreateWithoutBorrowedBooksInput[]
    connectOrCreate?: BookRatingsCreateOrConnectWithoutBorrowedBooksInput | BookRatingsCreateOrConnectWithoutBorrowedBooksInput[]
    upsert?: BookRatingsUpsertWithWhereUniqueWithoutBorrowedBooksInput | BookRatingsUpsertWithWhereUniqueWithoutBorrowedBooksInput[]
    createMany?: BookRatingsCreateManyBorrowedBooksInputEnvelope
    set?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
    disconnect?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
    delete?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
    connect?: BookRatingsWhereUniqueInput | BookRatingsWhereUniqueInput[]
    update?: BookRatingsUpdateWithWhereUniqueWithoutBorrowedBooksInput | BookRatingsUpdateWithWhereUniqueWithoutBorrowedBooksInput[]
    updateMany?: BookRatingsUpdateManyWithWhereWithoutBorrowedBooksInput | BookRatingsUpdateManyWithWhereWithoutBorrowedBooksInput[]
    deleteMany?: BookRatingsScalarWhereInput | BookRatingsScalarWhereInput[]
  }

  export type BorrowedBooksCreateNestedOneWithoutBookRatingsInput = {
    create?: XOR<BorrowedBooksCreateWithoutBookRatingsInput, BorrowedBooksUncheckedCreateWithoutBookRatingsInput>
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutBookRatingsInput
    connect?: BorrowedBooksWhereUniqueInput
  }

  export type BorrowedBooksUpdateOneRequiredWithoutBookRatingsNestedInput = {
    create?: XOR<BorrowedBooksCreateWithoutBookRatingsInput, BorrowedBooksUncheckedCreateWithoutBookRatingsInput>
    connectOrCreate?: BorrowedBooksCreateOrConnectWithoutBookRatingsInput
    upsert?: BorrowedBooksUpsertWithoutBookRatingsInput
    connect?: BorrowedBooksWhereUniqueInput
    update?: XOR<XOR<BorrowedBooksUpdateToOneWithWhereWithoutBookRatingsInput, BorrowedBooksUpdateWithoutBookRatingsInput>, BorrowedBooksUncheckedUpdateWithoutBookRatingsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BorrowedBooksCreateWithoutUsersInput = {
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
    BookRatings?: BookRatingsCreateNestedManyWithoutBorrowedBooksInput
    Books: BooksCreateNestedOneWithoutBorrowedBooksInput
  }

  export type BorrowedBooksUncheckedCreateWithoutUsersInput = {
    BorrowId?: number
    BookId: number
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
    BookRatings?: BookRatingsUncheckedCreateNestedManyWithoutBorrowedBooksInput
  }

  export type BorrowedBooksCreateOrConnectWithoutUsersInput = {
    where: BorrowedBooksWhereUniqueInput
    create: XOR<BorrowedBooksCreateWithoutUsersInput, BorrowedBooksUncheckedCreateWithoutUsersInput>
  }

  export type BorrowedBooksCreateManyUsersInputEnvelope = {
    data: BorrowedBooksCreateManyUsersInput | BorrowedBooksCreateManyUsersInput[]
  }

  export type BorrowedBooksUpsertWithWhereUniqueWithoutUsersInput = {
    where: BorrowedBooksWhereUniqueInput
    update: XOR<BorrowedBooksUpdateWithoutUsersInput, BorrowedBooksUncheckedUpdateWithoutUsersInput>
    create: XOR<BorrowedBooksCreateWithoutUsersInput, BorrowedBooksUncheckedCreateWithoutUsersInput>
  }

  export type BorrowedBooksUpdateWithWhereUniqueWithoutUsersInput = {
    where: BorrowedBooksWhereUniqueInput
    data: XOR<BorrowedBooksUpdateWithoutUsersInput, BorrowedBooksUncheckedUpdateWithoutUsersInput>
  }

  export type BorrowedBooksUpdateManyWithWhereWithoutUsersInput = {
    where: BorrowedBooksScalarWhereInput
    data: XOR<BorrowedBooksUpdateManyMutationInput, BorrowedBooksUncheckedUpdateManyWithoutUsersInput>
  }

  export type BorrowedBooksScalarWhereInput = {
    AND?: BorrowedBooksScalarWhereInput | BorrowedBooksScalarWhereInput[]
    OR?: BorrowedBooksScalarWhereInput[]
    NOT?: BorrowedBooksScalarWhereInput | BorrowedBooksScalarWhereInput[]
    BorrowId?: IntFilter<"BorrowedBooks"> | number
    UserId?: IntFilter<"BorrowedBooks"> | number
    BookId?: IntFilter<"BorrowedBooks"> | number
    BorrowDate?: DateTimeFilter<"BorrowedBooks"> | Date | string
    ReturnDate?: DateTimeNullableFilter<"BorrowedBooks"> | Date | string | null
  }

  export type BorrowedBooksCreateWithoutBooksInput = {
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
    BookRatings?: BookRatingsCreateNestedManyWithoutBorrowedBooksInput
    Users: UsersCreateNestedOneWithoutBorrowedBooksInput
  }

  export type BorrowedBooksUncheckedCreateWithoutBooksInput = {
    BorrowId?: number
    UserId: number
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
    BookRatings?: BookRatingsUncheckedCreateNestedManyWithoutBorrowedBooksInput
  }

  export type BorrowedBooksCreateOrConnectWithoutBooksInput = {
    where: BorrowedBooksWhereUniqueInput
    create: XOR<BorrowedBooksCreateWithoutBooksInput, BorrowedBooksUncheckedCreateWithoutBooksInput>
  }

  export type BorrowedBooksCreateManyBooksInputEnvelope = {
    data: BorrowedBooksCreateManyBooksInput | BorrowedBooksCreateManyBooksInput[]
  }

  export type BorrowedBooksUpsertWithWhereUniqueWithoutBooksInput = {
    where: BorrowedBooksWhereUniqueInput
    update: XOR<BorrowedBooksUpdateWithoutBooksInput, BorrowedBooksUncheckedUpdateWithoutBooksInput>
    create: XOR<BorrowedBooksCreateWithoutBooksInput, BorrowedBooksUncheckedCreateWithoutBooksInput>
  }

  export type BorrowedBooksUpdateWithWhereUniqueWithoutBooksInput = {
    where: BorrowedBooksWhereUniqueInput
    data: XOR<BorrowedBooksUpdateWithoutBooksInput, BorrowedBooksUncheckedUpdateWithoutBooksInput>
  }

  export type BorrowedBooksUpdateManyWithWhereWithoutBooksInput = {
    where: BorrowedBooksScalarWhereInput
    data: XOR<BorrowedBooksUpdateManyMutationInput, BorrowedBooksUncheckedUpdateManyWithoutBooksInput>
  }

  export type BookRatingsCreateWithoutBorrowedBooksInput = {
    Rating: number
    RatingDate: Date | string
  }

  export type BookRatingsUncheckedCreateWithoutBorrowedBooksInput = {
    RatingId?: number
    Rating: number
    RatingDate: Date | string
  }

  export type BookRatingsCreateOrConnectWithoutBorrowedBooksInput = {
    where: BookRatingsWhereUniqueInput
    create: XOR<BookRatingsCreateWithoutBorrowedBooksInput, BookRatingsUncheckedCreateWithoutBorrowedBooksInput>
  }

  export type BookRatingsCreateManyBorrowedBooksInputEnvelope = {
    data: BookRatingsCreateManyBorrowedBooksInput | BookRatingsCreateManyBorrowedBooksInput[]
  }

  export type BooksCreateWithoutBorrowedBooksInput = {
    Title: string
    Author: string
    PublishedYear?: number | null
  }

  export type BooksUncheckedCreateWithoutBorrowedBooksInput = {
    BookId?: number
    Title: string
    Author: string
    PublishedYear?: number | null
  }

  export type BooksCreateOrConnectWithoutBorrowedBooksInput = {
    where: BooksWhereUniqueInput
    create: XOR<BooksCreateWithoutBorrowedBooksInput, BooksUncheckedCreateWithoutBorrowedBooksInput>
  }

  export type UsersCreateWithoutBorrowedBooksInput = {
    Name: string
  }

  export type UsersUncheckedCreateWithoutBorrowedBooksInput = {
    UserId?: number
    Name: string
  }

  export type UsersCreateOrConnectWithoutBorrowedBooksInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBorrowedBooksInput, UsersUncheckedCreateWithoutBorrowedBooksInput>
  }

  export type BookRatingsUpsertWithWhereUniqueWithoutBorrowedBooksInput = {
    where: BookRatingsWhereUniqueInput
    update: XOR<BookRatingsUpdateWithoutBorrowedBooksInput, BookRatingsUncheckedUpdateWithoutBorrowedBooksInput>
    create: XOR<BookRatingsCreateWithoutBorrowedBooksInput, BookRatingsUncheckedCreateWithoutBorrowedBooksInput>
  }

  export type BookRatingsUpdateWithWhereUniqueWithoutBorrowedBooksInput = {
    where: BookRatingsWhereUniqueInput
    data: XOR<BookRatingsUpdateWithoutBorrowedBooksInput, BookRatingsUncheckedUpdateWithoutBorrowedBooksInput>
  }

  export type BookRatingsUpdateManyWithWhereWithoutBorrowedBooksInput = {
    where: BookRatingsScalarWhereInput
    data: XOR<BookRatingsUpdateManyMutationInput, BookRatingsUncheckedUpdateManyWithoutBorrowedBooksInput>
  }

  export type BookRatingsScalarWhereInput = {
    AND?: BookRatingsScalarWhereInput | BookRatingsScalarWhereInput[]
    OR?: BookRatingsScalarWhereInput[]
    NOT?: BookRatingsScalarWhereInput | BookRatingsScalarWhereInput[]
    RatingId?: IntFilter<"BookRatings"> | number
    BorrowId?: IntFilter<"BookRatings"> | number
    Rating?: IntFilter<"BookRatings"> | number
    RatingDate?: DateTimeFilter<"BookRatings"> | Date | string
  }

  export type BooksUpsertWithoutBorrowedBooksInput = {
    update: XOR<BooksUpdateWithoutBorrowedBooksInput, BooksUncheckedUpdateWithoutBorrowedBooksInput>
    create: XOR<BooksCreateWithoutBorrowedBooksInput, BooksUncheckedCreateWithoutBorrowedBooksInput>
    where?: BooksWhereInput
  }

  export type BooksUpdateToOneWithWhereWithoutBorrowedBooksInput = {
    where?: BooksWhereInput
    data: XOR<BooksUpdateWithoutBorrowedBooksInput, BooksUncheckedUpdateWithoutBorrowedBooksInput>
  }

  export type BooksUpdateWithoutBorrowedBooksInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PublishedYear?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BooksUncheckedUpdateWithoutBorrowedBooksInput = {
    BookId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PublishedYear?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsersUpsertWithoutBorrowedBooksInput = {
    update: XOR<UsersUpdateWithoutBorrowedBooksInput, UsersUncheckedUpdateWithoutBorrowedBooksInput>
    create: XOR<UsersCreateWithoutBorrowedBooksInput, UsersUncheckedCreateWithoutBorrowedBooksInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutBorrowedBooksInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutBorrowedBooksInput, UsersUncheckedUpdateWithoutBorrowedBooksInput>
  }

  export type UsersUpdateWithoutBorrowedBooksInput = {
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateWithoutBorrowedBooksInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type BorrowedBooksCreateWithoutBookRatingsInput = {
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
    Books: BooksCreateNestedOneWithoutBorrowedBooksInput
    Users: UsersCreateNestedOneWithoutBorrowedBooksInput
  }

  export type BorrowedBooksUncheckedCreateWithoutBookRatingsInput = {
    BorrowId?: number
    UserId: number
    BookId: number
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
  }

  export type BorrowedBooksCreateOrConnectWithoutBookRatingsInput = {
    where: BorrowedBooksWhereUniqueInput
    create: XOR<BorrowedBooksCreateWithoutBookRatingsInput, BorrowedBooksUncheckedCreateWithoutBookRatingsInput>
  }

  export type BorrowedBooksUpsertWithoutBookRatingsInput = {
    update: XOR<BorrowedBooksUpdateWithoutBookRatingsInput, BorrowedBooksUncheckedUpdateWithoutBookRatingsInput>
    create: XOR<BorrowedBooksCreateWithoutBookRatingsInput, BorrowedBooksUncheckedCreateWithoutBookRatingsInput>
    where?: BorrowedBooksWhereInput
  }

  export type BorrowedBooksUpdateToOneWithWhereWithoutBookRatingsInput = {
    where?: BorrowedBooksWhereInput
    data: XOR<BorrowedBooksUpdateWithoutBookRatingsInput, BorrowedBooksUncheckedUpdateWithoutBookRatingsInput>
  }

  export type BorrowedBooksUpdateWithoutBookRatingsInput = {
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Books?: BooksUpdateOneRequiredWithoutBorrowedBooksNestedInput
    Users?: UsersUpdateOneRequiredWithoutBorrowedBooksNestedInput
  }

  export type BorrowedBooksUncheckedUpdateWithoutBookRatingsInput = {
    BorrowId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    BookId?: IntFieldUpdateOperationsInput | number
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BorrowedBooksCreateManyUsersInput = {
    BookId: number
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
  }

  export type BorrowedBooksUpdateWithoutUsersInput = {
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BookRatings?: BookRatingsUpdateManyWithoutBorrowedBooksNestedInput
    Books?: BooksUpdateOneRequiredWithoutBorrowedBooksNestedInput
  }

  export type BorrowedBooksUncheckedUpdateWithoutUsersInput = {
    BorrowId?: IntFieldUpdateOperationsInput | number
    BookId?: IntFieldUpdateOperationsInput | number
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BookRatings?: BookRatingsUncheckedUpdateManyWithoutBorrowedBooksNestedInput
  }

  export type BorrowedBooksUncheckedUpdateManyWithoutUsersInput = {
    BorrowId?: IntFieldUpdateOperationsInput | number
    BookId?: IntFieldUpdateOperationsInput | number
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BorrowedBooksCreateManyBooksInput = {
    UserId: number
    BorrowDate: Date | string
    ReturnDate?: Date | string | null
  }

  export type BorrowedBooksUpdateWithoutBooksInput = {
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BookRatings?: BookRatingsUpdateManyWithoutBorrowedBooksNestedInput
    Users?: UsersUpdateOneRequiredWithoutBorrowedBooksNestedInput
  }

  export type BorrowedBooksUncheckedUpdateWithoutBooksInput = {
    BorrowId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BookRatings?: BookRatingsUncheckedUpdateManyWithoutBorrowedBooksNestedInput
  }

  export type BorrowedBooksUncheckedUpdateManyWithoutBooksInput = {
    BorrowId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    BorrowDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BookRatingsCreateManyBorrowedBooksInput = {
    Rating: number
    RatingDate: Date | string
  }

  export type BookRatingsUpdateWithoutBorrowedBooksInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    RatingDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookRatingsUncheckedUpdateWithoutBorrowedBooksInput = {
    RatingId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    RatingDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookRatingsUncheckedUpdateManyWithoutBorrowedBooksInput = {
    RatingId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    RatingDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}